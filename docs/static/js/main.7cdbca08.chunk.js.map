{"version":3,"sources":["components/nota.js","App.js","reportWebVitals.js","index.js"],"names":["Nota","value","index","onChange","onDestroy","React","useState","grade","setGrade","percentage","setPercentage","calculate","_grade","_percentage","className","target","App","inputsArr","setInputsArr","dataArr","setDataArr","finalPercentage","setFinalPercentage","finalGrade","setFinalGrade","final","setFinal","updateData","arr","getNotas","reduce","acc","curr","displayInputs","map","number","id","onClick","arr1","arr2","push","length","pop","alert","theFinalGrade","console","log","theFinalPercentage","finalGrades","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7cdbca08.chunk.js","sourcesContent":["import React from 'react'\n\nconst Nota = ({ value, index, onChange, onDestroy}) => {\n  const [grade, setGrade] = React.useState(0)\n  const [percentage, setPercentage] = React.useState(0)\n\n  const gradeChangeHandler = ({target:{value}}) => {\n    setGrade(+value);\n    calculate(+value, percentage);\n  }\n\n  const percentageChangeHandler = ({ target:{value} }) => {\n    setPercentage(+value);\n    calculate(grade, +value);\n  }\n\n  const calculate = (_grade, _percentage) => {\n    onChange(_grade * _percentage / 100, index);\n  }\n\n  /*\n  const onClickHandler = (e) => {\n    onDestroy(index)\n  }\n  */\n\n  return(\n    <div className=\"nota\">\n      <p>Nota {index + 1}<input onChange={gradeChangeHandler} />\n      <input onChange={percentageChangeHandler} />%</p>\n    </div>\n  );\n}\n\nexport default Nota\n","import React from 'react'\n\nimport Nota from './components/nota'\nimport './styles.css'\n\nconst App = () => {\n  const [inputsArr, setInputsArr] = React.useState([0,0,0,0])\n  const [dataArr, setDataArr] = React.useState([0,0,0,0])\n  const [finalPercentage, setFinalPercentage] = React.useState(0)\n  const [finalGrade, setFinalGrade] = React.useState(0)\n  const [final, setFinal] = React.useState([0,0])\n\n  const updateData = (value ,index) => {\n    let arr = [...dataArr]\n    arr[index] = value\n    setDataArr(arr)\n  }\n\n  const addNota = () => {\n    let arr1 = [...inputsArr]\n    let arr2 = [...dataArr]\n    arr1.push(0)\n    arr2.push(0)\n    setInputsArr(arr1)\n    setDataArr(arr2)\n  }\n\n  const deleteLast = () => {\n    let arr1 = [...inputsArr]\n    if (arr1.length === 2){\n      alert(\"you cant delete more items\")\n      return\n    }\n    let arr2 = [...dataArr]\n    arr1.pop()\n    arr2.pop()\n    setInputsArr(arr1)\n    setDataArr(arr2)\n  }\n\n/* delete an specific item\n  const deleteItem = (index) => {\n    let arr1 = [...inputsArr]\n    let arr2 = [...dataArr]\n    arr1.splice(index, 1)\n    arr2.splice(index, 1)\n    setInputsArr(arr1)\n    setDataArr(arr2)\n  }\n*/\n\n  const getFinalsPercentage = ({target:{value}}) => {\n    setFinalPercentage((+value) / 100)\n    const theFinalPercentage = ((100 - (+value)) / 100)\n    const finalGrades = getNotas(dataArr)\n    let arr = [...final]\n    arr[0] = (finalGrades * theFinalPercentage)\n    console.log(finalGrade)\n    setFinal(arr)\n    console.log(arr)\n    if (finalGrade !== 0){\n      arr[1] = finalGrade * (+value / 100)\n    }\n  }\n\n  const getFinalGrade = ({target:{value}}) => {\n    setFinalGrade(+value)\n    const theFinalGrade = ((+value) * (finalPercentage))\n    let arr = [...final]\n    arr[1] = theFinalGrade\n    setFinal(arr)\n    console.log(arr)\n  }\n\n  const getNotas = (arr) => {\n    return arr.reduce((acc, curr) => acc + curr)\n  }\n\n  const displayInputs = inputsArr.map((number,index) => \n    <Nota\n      key={index}\n      value={number}\n      index={index}\n      onChange={updateData}\n      //onDestroy={deleteItem}\n      />\n    );\n\n  return(\n    <div className='main'>\n      <div className='content'>'\n      {displayInputs}\n      <p id=\"promedio\">Promedio {getNotas(dataArr)} </p>\n      <br />\n        <div className=\"buttons\">\n          <button className=\"button\" onClick={addNota}>+</button>\n          <button className=\"button delete\" onClick={deleteLast}>-</button>\n        </div>\n        <div className=\"examen\">\n          <div className=\"final-inputs\">\n            <p>Nota examen\n            <input onChange={getFinalGrade}/>\n            <input onChange={getFinalsPercentage} />\n            % \n            </p>\n          </div>\n          <div className=\"final-grade\">\n            <p>Promedio Final {getNotas(final)}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}